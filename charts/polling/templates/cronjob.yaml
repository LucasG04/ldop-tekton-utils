# define vars so they can be used in the range loop
{{- $dot := . }}

{{- range $v := .Values.repos }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "polling.fullname" $dot }}
  labels:
    {{- include "polling.labels" $dot | nindent 4 }}
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: {{ include "polling.fullname" $dot }}-job-{{ $v.repoName }}
              volumeMounts:
                - name: polledrepos
                  mountPath: /repos
              image: registry.redhat.io/rhel8/toolbox:latest
              env:
                - name: REPOURL
                  value: {{ $v.repoUrl }}
                - name: REPONAME
                  value: {{ $v.repoName }}
                - name: REPOBRANCH
                  value: {{ $v.branch }}
                - name: EVENTLISTENER_SVC_URL
                  value: {{ $v.eventListenerSvcUrl }}
              command:
                - /bin/bash
              args:
                - -c
                - |
                  set -eu

                  BASEDIR="/repos"

                  # Revision initialization
                  _current_revision=$(git ls-remote --heads ${REPOURL} ${REPOBRANCH} | awk '{print $1}')
                  _prev_revision=${_current_revision}

                  # If there is no existing previous revision data file, create a new revision data file with the current revision
                  if [ -f ${BASEDIR}/${REPONAME}.sha256 ]; then
                      _prev_revision=$(cat ${BASEDIR}/${REPONAME}.sha256)
                  else
                      echo ${_current_revision} >${BASEDIR}/${REPONAME}.sha256
                  fi

                  # Generating JSON data
                  _jsondata=$(cat <<EOF
                  {
                      "revision": "${_current_revision}",
                      "repository_url": "${REPOURL}",
                      "repository_name": "${REPONAME}"
                  }
                  EOF
                  )

                  # Check if there are any changes by comparing previous and current revisions.
                  # If there are changes, trigger a new pipeline using curl and json data.
                  if [ "${_current_revision}" != "${_prev_revision}" ]; then
                      echo ${_current_revision} >${BASEDIR}/${REPONAME}.sha256
                      curl -s -X POST -H 'Content-Type: application/json' -d "${_jsondata}" ${EVENTLISTENER_SVC_URL}
                  else
                      echo "No changes"
                  fi
          restartPolicy: Never
          volumes:
            - name: polledrepos
              persistentVolumeClaim:
                claimName: {{ include "polling.fullname" $dot }}
---
{{- end }}